package tools

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	gt "github.com/bas24/googletranslatefree"
	"github.com/projectdiscovery/gologger"
)

type CVEInfos struct {
	CVENumer       string
	CVSSv3Score    float64
	CVSSv3Severity string
	Description    string
	GithubRepo     GithubRepo
}

type GithubRepo struct {
	Created     string `json:"created"`
	Description string `json:"description"`
	Language    string `json:"language"`
	Name        string `json:"name"`
	Stars       int    `json:"stars"`
	Topics      string `json:"topics"`
	Updated     string `json:"updated"`
	Url         string `json:"url"`
}

func Getcve(_option string) ([]CVEInfos, error) {
	var url string
	if _option == "day" {
		url = "https://cvetrends.com/api/cves/24hrs"
	} else if _option == "week" {
		url = "https://cvetrends.com/api/cves/order-by-tweets-7days"
	}

	req, err := http.Get(url)
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0")

	body, err := ioutil.ReadAll(req.Body)

	var result map[string]interface{}
	json.Unmarshal([]byte(body), &result)
	data := result["data"].([]interface{})

	var cveInfos []CVEInfos
	for _, value := range data {
		cveNumber := fmt.Sprintf("%v", value.(map[string]interface{})["cve"])
		tmpScore := fmt.Sprintf("%v", value.(map[string]interface{})["cvssv3_base_score"])
		stof, err := strconv.ParseFloat(tmpScore, 64)
		if err != nil {
			gologger.Warning().Msgf(err.Error())
		}
		cvssv3Score := stof
		cvssv3Severity := fmt.Sprintf("%v", value.(map[string]interface{})["cvssv3_base_severity"])
		description := fmt.Sprintf("%v", value.(map[string]interface{})["description"])

		if strings.Contains(description, "nil") {
			description = "No Description"
		}
		descTans, _ := gt.Translate(description, "en", "ko")
		description = descTans

		// TODO
		tmpGithubRepos := value.(map[string]interface{})["github_repos"].([]interface{})
		var bestStars interface{}
		var cmp int = 0
		if 0 < len(tmpGithubRepos) {
			for _, gr := range tmpGithubRepos {
				tmpStars := fmt.Sprintf("%v", gr.(map[string]interface{})["stars"])
				stars, err := strconv.Atoi(tmpStars)
				if err != nil {
					gologger.Warning().Msgf(err.Error())
				}
				if cmp < stars {
					cmp = stars
					bestStars = gr
				}
			}
		}

		var bestStarGithubRepo GithubRepo
		if 0 < len(tmpGithubRepos) && bestStars != nil {
			created := fmt.Sprintf("%v", bestStars.(map[string]interface{})["created"])
			desc := fmt.Sprintf("%v", bestStars.(map[string]interface{})["description"])
			language := fmt.Sprintf("%v", bestStars.(map[string]interface{})["language"])
			name := fmt.Sprintf("%v", bestStars.(map[string]interface{})["name"])
			tmpStars := fmt.Sprintf("%v", bestStars.(map[string]interface{})["stars"])
			stars, err := strconv.Atoi(tmpStars)
			if err != nil {
				gologger.Warning().Msgf(err.Error())
			}
			topics := fmt.Sprintf("%v", bestStars.(map[string]interface{})["topics"])
			updated := fmt.Sprintf("%v", bestStars.(map[string]interface{})["updated"])
			url := fmt.Sprintf("%v", bestStars.(map[string]interface{})["url"])
			bestStarGithubRepo = GithubRepo{
				Created:     created,
				Description: desc,
				Language:    language,
				Name:        name,
				Stars:       stars,
				Topics:      topics,
				Updated:     updated,
				Url:         url,
			}
		}

		cveInfos = append(cveInfos, CVEInfos{
			CVENumer:       cveNumber,
			CVSSv3Score:    cvssv3Score,
			CVSSv3Severity: cvssv3Severity,
			Description:    description,
			GithubRepo:     bestStarGithubRepo,
		})
		// gologger.Info().Msgf("CVE : %v\n", value.(map[string]interface{})["cve"])
		// gologger.Info().Msgf("CVSSv3 Score%v\n", value.(map[string]interface{})["cvssv3_base_score"])
		// gologger.Info().Msgf("Severity %v\n", value.(map[string]interface{})["cvssv3_base_severity"])
		// gologger.Info().Msgf("Description %v\n", value.(map[string]interface{})["description"])
	}
	return cveInfos, err
}
